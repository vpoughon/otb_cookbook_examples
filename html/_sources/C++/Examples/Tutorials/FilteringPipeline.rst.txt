.. _example-FilteringPipeline:

FilteringPipeline.cxx
=====================





Example usage:

.. code-block:: bash

    ./FilteringPipeline Input/QB_Suburb.png Output/TutorialsFilteringPipelineOutput.png


Example source code (`FilteringPipeline.cxx <https://gitlab.orfeo-toolbox.org/orfeotoolbox/otb/raw/develop/Examples/Tutorials/FilteringPipeline.cxx?inline=false>`_):

.. code-block:: cpp

    //
    //  We are going to use the \doxygen{itk}{GradientMagnitudeImageFilter}
    // to compute the gradient of the image. The beginning of the file is
    // similar to the Pipeline.cxx.
    //
    // We include the required headers, without forgetting to add the header
    // for the \doxygen{itk}{GradientMagnitudeImageFilter}.
    
    #include "otbImage.h"
    #include "otbImageFileReader.h"
    #include "otbImageFileWriter.h"
    #include "itkGradientMagnitudeImageFilter.h"
    
    int main(int argc, char* argv[])
    {
      if (argc != 3)
      {
        std::cerr << "Usage: " << argv[0] << " <input_filename> <output_filename>" << std::endl;
      }
    
      //  We declare the image type, the reader and the writer as
      //  before:
    
      typedef otb::Image<unsigned char, 2> ImageType;
    
      typedef otb::ImageFileReader<ImageType> ReaderType;
      ReaderType::Pointer                     reader = ReaderType::New();
    
      typedef otb::ImageFileWriter<ImageType> WriterType;
      WriterType::Pointer                     writer = WriterType::New();
    
      reader->SetFileName(argv[1]);
      writer->SetFileName(argv[2]);
    
      // Now we have to declare the filter. It is templated with the
      // input image type and the output image type like many filters
      // in OTB. Here we are using the same type for the input and the
      // output images:
    
      typedef itk::GradientMagnitudeImageFilter<ImageType, ImageType> FilterType;
      FilterType::Pointer                                             filter = FilterType::New();
    
      // Let's plug the pipeline:
    
      filter->SetInput(reader->GetOutput());
      writer->SetInput(filter->GetOutput());
    
      // And finally, we trigger the pipeline execution calling the \code{Update()}
      // method on the writer
    
      writer->Update();
    
      return EXIT_SUCCESS;
    }
