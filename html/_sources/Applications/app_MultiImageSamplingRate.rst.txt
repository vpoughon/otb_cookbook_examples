.. _app-MultiImageSamplingRate:

MultiImageSamplingRate
======================


Compute sampling rate for an input set of images.

Description
-----------

The application computes sampling rates for a set of input images. Before calling this application, each pair of image and training vectors has to be analysed with the application :ref:`app-PolygonClassStatistics`. The statistics file is then used to compute the sampling rates for each class in each image. Several types of sampling  are implemented. Each one is a combination of a mono-image strategy and a multi-image mode. The mono-image strategies are:

* smallest (default): select the same number of sample in each class so that the smallest one is fully sampled.
* constant: select the same number of samples N in each class (with N below or equal to the size of the smallest class).
* byclass: set the required number for each class manually, with an input CSV file (first column is class name, second one is the required samples number).

The multi-image modes (mim) are proportional, equal and custom. The custom mode lets the users choose the distribution of samples among the images. The different behaviours are described below. Ti(c) and Ni(c)  refers resp. to the total number and needed number of samples in image i for class c. Let's call L the total number of images.

* strategy = all

    - Same behaviour for all modes: take all samples

* strategy = constant: let's call M the global number of samples required per class. For each image i and each class c:

    - if mim = proportional, then Ni( c ) = M * Ti( c ) / sum_k( Tk(c) )

    - if mim = equal       , then Ni( c ) = M / L

    - if mim = custom      , then Ni( c ) = Mi where Mi is the custom requested number of samples for image i

* strategy = byClass : let's call M(c) the global number of samples for class c). For each image i and each class c:

    - if mim = proportional, then Ni( c ) = M(c) * Ti( c ) / sum_k( Tk(c) )

    - if mim = equal       , then Ni( c ) = M(c) / L

    - if mim = custom      , then Ni( c ) = Mi(c) where Mi(c) is the custom requested number of samples for image i and class c

* strategy = percent : For each image i and each class c:

    - if mim = proportional, then Ni( c ) = p * Ti( c ) where p is the global percentage of samples

    - if mim = equal       , then Ni( c ) = p * sum_k(Tk(c)]/L where p is the global percentage of samples

    - if mim = custom      , then Ni( c ) = p(i) * Ti(c) where p(i) is the percentage of samples for image i. c

* strategy = total : For each image i and each class c:

    - if mim = proportional, then Ni( c ) = total * (sum_k(Ti(k))/sum_kl(Tl(k))) * (Ti(c)/sum_k(Ti(k))) where total is the total number of samples specified.

    - if mim = equal       , then Ni( c ) = (total / L) * (Ti(c)/sum_k(Ti(k))) where total is the total number of samples specified.

    - if mim = custom      , then Ni( c ) = total(i) * (Ti(c)/sum_k(Ti(k))) where total(i) is the total number of samples specified for image i. 

* strategy = smallest class

    - if mim = proportional, then the smallest class size (computed globally) is used for the strategy constant+proportional.

    - if mim = equal       , then the smallest class size (computed globally) is used for the strategy constant+equal.

    - if mim = custom      , then the smallest class is computed and used for each image separately.

Parameters
----------

.. contents:: :local:

.. |br| raw:: html

   <br />

.. |em| raw:: html

   &emsp;

**Input statistics** :code:`-il filename1 filename2...` *Mandatory* |br|
List of statistics files for each input image.

**Output sampling rates** :code:`-out filename [dtype]` *Mandatory* |br|
Output filename storing sampling rates (CSV format with class name, required samples, total samples, and rate). The given filename will be used with a suffix to indicate the corresponding input index (for instance: rates.csv will give rates_1.csv, rates_2.csv, ...).

**Sampling strategy** :code:`-strategy [byclass|constant|smallest|percent|total|all]` *Default value: smallest* |br|


* **Set samples count for each class** |br| Set samples count for each class

* **Set the same samples counts for all classes** |br| Set the same samples counts for all classes

* **Set same number of samples for all classes, with the smallest class fully sampled** |br| Set same number of samples for all classes, with the smallest class fully sampled

* **Use a percentage of the samples available for each class** |br| Use a percentage of the samples available for each class

* **Set the total number of samples to generate, and use class proportions.** |br| Set the total number of samples to generate, and use class proportions.

* **Take all samples** |br| Take all samples



Set samples count for each class options
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Number of samples by class** :code:`-strategy.byclass.in filename1 filename2...` *Mandatory* |br|
Number of samples by class (CSV format with class name in 1st column and required samples in the 2nd).In the case of the custom multi-image mode, several inputs may be given for each image.

Set the same samples counts for all classes options
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Number of samples for all classes** :code:`-strategy.constant.nb string` *Mandatory* |br|
Number of samples for all classes.In the case of the custom multi-image mode, several values can be given for each image.

Use a percentage of the samples available for each class options
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**The percentage(s) to use** :code:`-strategy.percent.p string` *Mandatory* |br|
The percentage(s) to use In the case of the custom multi-image mode, several values can be given for each image.

Set the total number of samples to generate, and use class proportions. options
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**The number of samples to generate** :code:`-strategy.total.v string` *Mandatory* |br|
The number of samples to generateIn the case of the custom multi-image mode, several values can be given for each image.



------------

**Multi-Image Mode** :code:`-mim [proportional|equal|custom]` *Default value: proportional* |br|


* **Proportional** |br| Split proportionally the required number of samples

* **equal** |br| Split equally the required number of samples

* **Custom** |br| Split the required number of samples following user choice.



**Load parameters from XML** :code:`-inxml filename.xml` |br|
Load application parameters from an XML file.

**Save parameters to XML** :code:`-outxml filename.xml` |br|
Save application parameters to an XML file.



Examples
--------

From the command-line:

.. code-block:: bash

    otbcli_MultiImageSamplingRate -il stats_1.xml stats_2.xml -out rates.csv -strategy smallest -mim proportional


From Python:

.. code-block:: python

	import otbApplication

	app = otbApplication.Registry.CreateApplication("MultiImageSamplingRate")


	app.SetParameterString("out", "rates.csv")
	app.SetParameterString("strategy","smallest")
	app.SetParameterString("mim","proportional")

	app.ExecuteAndWriteOutput()






