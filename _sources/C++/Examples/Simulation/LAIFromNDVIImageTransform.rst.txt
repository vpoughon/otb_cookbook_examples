.. _LAIFromNDVIImageTransform.cxx:

LAIFromNDVIImageTransform.cxx
=============================





Example usage:

.. code-block:: bash

    ./LAIFromNDVIImageTransform Input/verySmallFSATSW.tif \
                                Output/siTvLAIFromNDVIImageTransformExampleTest_verySmallFSATSW.tif \
                                Output/verySmallFSATSW_visu.png \
                                Output/siTvLAIFromNDVIImageTransformExampleTest_verySmallFSATSW_visu.png \
                                1 \
                                4



Example source code (`LAIFromNDVIImageTransform.cxx <https://gitlab.orfeo-toolbox.org/orfeotoolbox/otb/raw/develop/Examples/Simulation/LAIFromNDVIImageTransform.cxx?inline=false>`__):

.. code-block:: cpp

    //
    // This example presents a way to generate LAI (Leaf Area Index) image using formula dedicated to Formosat2.
    // LAI Image is used as an input in Image Simulation process.
    //
    // Let's look at the minimal code required to use this algorithm. First, the
    // following headers must be included.
    
    #include "otbMultiChannelRAndNIRIndexImageFilter.h"
    
    #include "otbImage.h"
    #include "otbImageFileWriter.h"
    
    #include "otbImage.h"
    #include "otbVectorImage.h"
    #include "otbImageFileReader.h"
    #include "otbImageFileWriter.h"
    
    #include "itkRescaleIntensityImageFilter.h"
    
    int main(int argc, char* argv[])
    {
      if (argc != 7)
      {
        std::cerr << "Wrong Parameters " << std::endl;
        return EXIT_FAILURE;
      }
    
      const unsigned int                            Dimension = 2;
      typedef otb::VectorImage<double, Dimension>   InputImageType;
      typedef otb::Image<double, Dimension>         OutputImageType;
      typedef otb::Image<unsigned char, Dimension>  ImageVisuType;
      typedef otb::ImageFileReader<InputImageType>  ReaderType;
      typedef otb::ImageFileWriter<OutputImageType> WriterType;
      typedef otb::ImageFileWriter<ImageVisuType>   VisuWriterType;
      typedef otb::ImageFileWriter<InputImageType>  InWriterType;
      // Filter type is a generic \doxygen{otb}{MultiChannelRAndNIRIndexImageFilter} using Formosat2 specific LAI
      //  \doxygen{otb}{LAIFromNDVIFormosat2Functor}.
    
      typedef otb::Functor::LAIFromNDVIFormosat2Functor<InputImageType::InternalPixelType, InputImageType::InternalPixelType, OutputImageType::PixelType>
                                                                                                     FunctorType;
      typedef otb::MultiChannelRAndNIRIndexImageFilter<InputImageType, OutputImageType, FunctorType> MultiChannelRAndNIRIndexImageFilterType;
    
      // Instantiating object
    
      //  Next the filter is created by invoking the \code{New()}~method and
      //  assigning the result to a \doxygen{itk}{SmartPointer}.
    
      MultiChannelRAndNIRIndexImageFilterType::Pointer filter = MultiChannelRAndNIRIndexImageFilterType::New();
    
      ReaderType::Pointer     reader     = ReaderType::New();
      WriterType::Pointer     writer     = WriterType::New();
      InWriterType::Pointer   inWriter   = InWriterType::New();
      VisuWriterType::Pointer visuWriter = VisuWriterType::New();
    
      char* InputName   = argv[1];
      char* OutputName1 = argv[2];
      char* OutputName2 = argv[3];
      char* OutputName3 = argv[4];
      reader->SetFileName(InputName);
    
    
      // filter input is set with input image
      //
    
      filter->SetInput(reader->GetOutput());
    
      // then red and nir channels index are set using \code{SetRedIndex()} and  \code{SetNIRIndex()}
      //
      unsigned int redChannel = static_cast<unsigned int>(atoi(argv[5]));
      unsigned int nirChannel = static_cast<unsigned int>(atoi(argv[6]));
      filter->SetRedIndex(redChannel);
      filter->SetNIRIndex(nirChannel);
    
      //  The invocation of the \code{Update()} method triggers the
      //  execution of the pipeline.
    
      filter->Update();
    
    
      writer->SetFileName(OutputName1);
      writer->SetInput(filter->GetOutput());
      writer->Update();
    
      // rescale data
    
      inWriter->SetFileName(OutputName2);
      // typedef itk::RescaleIntensityImageFilter<InputImageType,
      //     OutputImageType> RescalerType;
    
      // RescalerType::Pointer     rescaler     = RescalerType::New();
      // rescaler->SetInput(reader->GetOutput());
      // rescaler->SetOutputMinimum(0);
      // rescaler->SetOutputMaximum(255);
    
      inWriter->SetInput(reader->GetOutput());
      inWriter->Update();
    
    
      visuWriter->SetFileName(OutputName3);
      typedef itk::RescaleIntensityImageFilter<OutputImageType, ImageVisuType> RescalerTypeOut;
    
      RescalerTypeOut::Pointer rescaler = RescalerTypeOut::New();
      rescaler->SetInput(filter->GetOutput());
      rescaler->SetOutputMinimum(0);
      rescaler->SetOutputMaximum(255);
    
      visuWriter->SetInput(rescaler->GetOutput());
      visuWriter->Update();
    
      // \begin{figure}
      // \center
      // \includegraphics[width=0.44\textwidth]{verySmallFSATSW_visu.eps}
      // \includegraphics[width=0.44\textwidth]{siTvLAIFromNDVIImageTransformExampleTest_verySmallFSATSW_visu.eps}
      // \itkcaption[LAIFromNDVIImageTransform Filter]{LAI generation \emph{(right)} from NDVI applied on Formosat 2 Image \emph{(left)} .}
      // \label{fig:LAIFromNDVIImageTransform}
      // \end{figure}
      //
      //  Figure \ref{fig:LAIFromNDVIImageTransform} illustrates the LAI generation using Formosat 2 data.
      //
    
    
      return EXIT_SUCCESS;
    }
