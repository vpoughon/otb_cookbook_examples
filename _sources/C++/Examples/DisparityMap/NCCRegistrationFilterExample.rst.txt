.. _example-NCCRegistrationFilterExample:

NCCRegistrationFilterExample.cxx
================================





Example usage:

.. code-block:: bash

    ./NCCRegistrationFilterExample Input/StereoFixed.png \
                                   Input/StereoMoving.png \
                                   Output/deformationFieldOutput-horizontal.png \
                                   Output/deformationFieldOutput-vertical.png \
                                   Output/resampledOutput2.png \
                                   5 \
                                   1.0 \
                                   2


Example source code (`NCCRegistrationFilterExample.cxx <https://gitlab.orfeo-toolbox.org/orfeotoolbox/otb/raw/develop/Examples/DisparityMap/NCCRegistrationFilterExample.cxx?inline=false>`_):

.. code-block:: cpp

    // This example demonstrates the use of the \doxygen{otb}{NCCRegistrationFilter}. This filter performs deformation estimation
    // by optimising a PDE based on the normalized correlation coefficient. It uses the finite difference solver hierarchy.
    //
    // The first step toward the use of these filters is to include the proper header files.
    
    #include "otbImageFileWriter.h"
    #include "otbImageFileReader.h"
    
    #include "otbNCCRegistrationFilter.h"
    #include "itkRecursiveGaussianImageFilter.h"
    #include "itkWarpImageFilter.h"
    
    #include "otbImageOfVectorsToMonoChannelExtractROI.h"
    #include "itkUnaryFunctorImageFilter.h"
    #include "itkRescaleIntensityImageFilter.h"
    #include "itkCastImageFilter.h"
    
    #include <iostream>
    
    int main(int argc, char** argv)
    {
    
      if (argc != 9)
      {
        std::cerr << "Usage: " << argv[0];
        std::cerr << " fixedFileName movingFileName fieldOutNameHorizontal fieldOutNameVertical imageOutName ";
        std::cerr << "explorationSize bluringSigma nbIterations ";
    
        return EXIT_FAILURE;
      }
    
      const unsigned int ImageDimension = 2;
    
      typedef double                              PixelType;
      typedef itk::Vector<double, ImageDimension> DisplacementPixelType;
    
      typedef unsigned char                               OutputPixelType;
      typedef otb::Image<OutputPixelType, ImageDimension> OutputImageType;
    
      // Several type of \doxygen{otb}{Image} are required to represent the reference image (fixed)
      // the image we want to register (moving) and the deformation field.
    
      // Allocate Images
      typedef otb::Image<PixelType, ImageDimension>             MovingImageType;
      typedef otb::Image<PixelType, ImageDimension>             FixedImageType;
      typedef otb::Image<DisplacementPixelType, ImageDimension> DisplacementFieldType;
    
      typedef otb::ImageFileReader<FixedImageType> FixedReaderType;
      FixedReaderType::Pointer                     fReader = FixedReaderType::New();
      fReader->SetFileName(argv[1]);
    
      typedef otb::ImageFileReader<MovingImageType> MovingReaderType;
      MovingReaderType::Pointer                     mReader = MovingReaderType::New();
      mReader->SetFileName(argv[2]);
    
      // To make the correlation estimation more robust, the first
      // required step is to blur the input images. This is done using the
      // \doxygen{itk}{RecursiveGaussianImageFilter}:
    
      // Blur input images
      typedef itk::RecursiveGaussianImageFilter<FixedImageType, FixedImageType> FixedBlurType;
    
      FixedBlurType::Pointer fBlur = FixedBlurType::New();
      fBlur->SetInput(fReader->GetOutput());
      fBlur->SetSigma(std::stof(argv[7]));
    
      typedef itk::RecursiveGaussianImageFilter<MovingImageType, MovingImageType> MovingBlurType;
    
      MovingBlurType::Pointer mBlur = MovingBlurType::New();
      mBlur->SetInput(mReader->GetOutput());
      mBlur->SetSigma(std::stof(argv[7]));
    
      // Now, we need to instantiate the NCCRegistrationFilter which is going to perform the registration:
    
      // Create the filter
      typedef otb::NCCRegistrationFilter<FixedImageType, MovingImageType, DisplacementFieldType> RegistrationFilterType;
    
      RegistrationFilterType::Pointer registrator = RegistrationFilterType::New();
    
      registrator->SetMovingImage(mBlur->GetOutput());
      registrator->SetFixedImage(fBlur->GetOutput());
    
      // Some parameters need to be specified to the NCCRegistrationFilter:
      // \begin{itemize}
      // \item The area where the search is performed. This area is defined by its radius:
    
      typedef RegistrationFilterType::RadiusType RadiusType;
    
      RadiusType radius;
    
      radius[0] = std::stoi(argv[6]);
      radius[1] = std::stoi(argv[6]);
    
      registrator->SetNCCRadius(radius);
    
      std::cout << "NCC radius " << registrator->GetNCCRadius() << std::endl;
    
      // \item The number of iterations for the PDE resolution:
    
      registrator->SetNumberOfIterations(std::stoi(argv[8]));
      // registrator->GetDisplacementField();
    
      // \end{itemize}
      // The execution of the NCCRegistrationFilter will be triggered by
      // the \code{Update()} call on the writer at the end of the
      // pipeline. Make sure to use a
      // \doxygen{otb}{ImageFileWriter} if you want to benefit
      // from the streaming features.
    
      typedef otb::ImageOfVectorsToMonoChannelExtractROI<DisplacementFieldType, MovingImageType> ChannelExtractionFilterType;
      ChannelExtractionFilterType::Pointer                                                       channelExtractor = ChannelExtractionFilterType::New();
    
      channelExtractor->SetInput(registrator->GetOutput());
      channelExtractor->SetChannel(1);
    
      typedef itk::RescaleIntensityImageFilter<MovingImageType, OutputImageType> RescalerType;
      RescalerType::Pointer                                                      fieldRescaler = RescalerType::New();
    
      fieldRescaler->SetInput(channelExtractor->GetOutput());
      fieldRescaler->SetOutputMaximum(255);
      fieldRescaler->SetOutputMinimum(0);
    
      typedef otb::ImageFileWriter<OutputImageType> DFWriterType;
    
      DFWriterType::Pointer dfWriter = DFWriterType::New();
      dfWriter->SetFileName(argv[3]);
      dfWriter->SetInput(fieldRescaler->GetOutput());
      dfWriter->Update();
    
      channelExtractor->SetChannel(2);
      dfWriter->SetFileName(argv[4]);
      dfWriter->Update();
    
      typedef itk::WarpImageFilter<MovingImageType, MovingImageType, DisplacementFieldType> WarperType;
      WarperType::Pointer                                                                   warper = WarperType::New();
    
      MovingImageType::PixelType padValue = 4.0;
    
      warper->SetInput(mReader->GetOutput());
      warper->SetDisplacementField(registrator->GetOutput());
      warper->SetEdgePaddingValue(padValue);
    
      typedef itk::CastImageFilter<MovingImageType, OutputImageType> CastFilterType;
      CastFilterType::Pointer                                        caster = CastFilterType::New();
      caster->SetInput(warper->GetOutput());
    
      typedef otb::ImageFileWriter<OutputImageType> WriterType;
    
      WriterType::Pointer writer = WriterType::New();
      writer->SetFileName(argv[5]);
      writer->SetInput(caster->GetOutput());
      writer->Update();
    
      // Figure~\ref{fig:NCCRegistrationFilterOUTPUT} shows the result of
      // applying the disparity map estimation.
      //
      // \begin{figure}
      // \center
      // \includegraphics[width=0.40\textwidth]{StereoFixed.eps}
      // \includegraphics[width=0.40\textwidth]{StereoMoving.eps}
      // \includegraphics[width=0.40\textwidth]{deformationFieldOutput-horizontal.eps}
      // \includegraphics[width=0.40\textwidth]{deformationFieldOutput-vertical.eps}
      // \itkcaption[Displacement field and resampling from NCC registration]{From left
      // to right and top to bottom: fixed input image, moving image with a low stereo angle,
      // estimated deformation field in the horizontal direction, estimated deformation field in the vertical direction.}
      // \label{fig:NCCRegistrationFilterOUTPUT}
      // \end{figure}
    
      return EXIT_SUCCESS;
    }
