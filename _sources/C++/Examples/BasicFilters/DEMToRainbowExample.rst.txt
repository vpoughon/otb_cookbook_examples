.. _DEMToRainbowExample.cxx:

DEMToRainbowExample.cxx
=======================



In some situation, it is desirable to represent a gray scale image in color for easier
interpretation. This is particularly the case if pixel values in the image are used
to represent some data such as elevation, deformation map,
interferogram. In this case, it is important to ensure that similar
values will get similar colors. You can notice how this requirement
differs from the previous case.

The following example illustrates the use of the :doxygen:`DEMToImageGenerator`
class combined with the `ScalarToRainbowRGBPixelFunctor`. You can refer to the
source code for the DEM conversion to image, we will focus on the color
conversion part here.

.. |image1| image:: /Output/DEMToRainbowImageGenerator.png

.. |image2| image:: /Output/DEMToHotImageGenerator.png

.. |image3| image:: /Output/DEMToReliefImageGenerator.png

.. _Figure1:

+--------------------------+-------------------------+-------------------------+
|        |image1|          |         |image2|        |         |image3|        |
+--------------------------+-------------------------+-------------------------+


Example usage:

.. code-block:: bash

    ./DEMToRainbowExample Output/DEMToRainbowImageGenerator.png 6.5 45.5 500 500 0.002 -0.002 Input/DEM_srtm

Example usage:

.. code-block:: bash

    ./DEMToRainbowExample Output/DEMToHotImageGenerator.png 6.5 45.5 500 500 0.002 -0.002 Input/DEM_srtm hot

Example usage:

.. code-block:: bash

    ./DEMToRainbowExample Output/DEMToReliefImageGenerator.png 6.5 45.5 500 500 0.002 -0.002 Input/DEM_srtm relief



Example source code (`DEMToRainbowExample.cxx <https://gitlab.orfeo-toolbox.org/orfeotoolbox/otb/raw/develop/Examples/BasicFilters/DEMToRainbowExample.cxx?inline=false>`__):

.. code-block:: cpp

    #include "otbImageFileReader.h"
    #include "otbImageFileWriter.h"
    
    #include "itkScalarToRGBColormapImageFilter.h"
    #include "otbScalarToRainbowRGBPixelFunctor.h"
    #include "otbDEMToImageGenerator.h"
    #include "otbReliefColormapFunctor.h"
    
    int main(int argc, char* argv[])
    {
    
      if (argc < 9)
      {
        std::cout << argv[0] << " <output_filename> <Longitude Output Origin point>";
        std::cout << " <Latitude Output Origin point> <X Output Size> <Y Output size>";
        std::cout << " <X Spacing> <Y Spacing> <DEM folder path>" << std::endl;
        return EXIT_FAILURE;
      }
    
      typedef double                             PixelType;
      typedef unsigned char                      UCharPixelType;
      typedef itk::RGBPixel<UCharPixelType>      RGBPixelType;
      typedef otb::Image<PixelType, 2>           ImageType;
      typedef otb::Image<RGBPixelType, 2>        RGBImageType;
      typedef otb::ImageFileWriter<RGBImageType> WriterType;
    
      WriterType::Pointer writer = WriterType::New();
      writer->SetFileName(argv[1]);
    
      typedef otb::DEMToImageGenerator<ImageType> DEMToImageGeneratorType;
    
      DEMToImageGeneratorType::Pointer demToImage = DEMToImageGeneratorType::New();
    
      typedef DEMToImageGeneratorType::SizeType    SizeType;
      typedef DEMToImageGeneratorType::SpacingType SpacingType;
      typedef DEMToImageGeneratorType::PointType   PointType;
    
      otb::DEMHandler::Instance()->OpenDEMDirectory(argv[8]);
    
      PointType origin;
      origin[0] = ::atof(argv[2]);
      origin[1] = ::atof(argv[3]);
    
      demToImage->SetOutputOrigin(origin);
    
      SizeType size;
      size[0] = ::atoi(argv[4]);
      size[1] = ::atoi(argv[5]);
    
      demToImage->SetOutputSize(size);
    
      SpacingType spacing;
      spacing[0] = ::atof(argv[6]);
      spacing[1] = ::atof(argv[7]);
    
      demToImage->SetOutputSpacing(spacing);
    
      // The ScalarToRGBColormapImageFilter is
      // the filter in charge of calling the functor we specify to do the work for
      // each pixel. Here it is the ScalarToRainbowRGBPixelFunctor.
    
      typedef itk::ScalarToRGBColormapImageFilter<ImageType, RGBImageType> ColorMapFilterType;
      ColorMapFilterType::Pointer                                          colormapper = ColorMapFilterType::New();
      colormapper->UseInputImageExtremaForScalingOff();
    
      if (argc == 9)
      {
        typedef otb::Functor::ScalarToRainbowRGBPixelFunctor<PixelType, RGBPixelType> ColorMapFunctorType;
        ColorMapFunctorType::Pointer                                                  colormap = ColorMapFunctorType::New();
        colormap->SetMinimumInputValue(0);
        colormap->SetMaximumInputValue(4000);
        colormapper->SetColormap(colormap);
      }
    
      else
      {
        if (strcmp(argv[9], "hot") == 0)
        {
          typedef itk::Function::HotColormapFunction<PixelType, RGBPixelType> ColorMapFunctorType;
          ColorMapFunctorType::Pointer                                        colormap = ColorMapFunctorType::New();
          colormap->SetMinimumInputValue(0);
          colormap->SetMaximumInputValue(4000);
          colormapper->SetColormap(colormap);
        }
        else
        {
          typedef otb::Functor::ReliefColormapFunctor<PixelType, RGBPixelType> ColorMapFunctorType;
          ColorMapFunctorType::Pointer                                         colormap = ColorMapFunctorType::New();
          colormap->SetMinimumInputValue(0);
          colormap->SetMaximumInputValue(4000);
          colormapper->SetColormap(colormap);
        }
      }
      // And we connect the color mapper filter with the filter producing
      // the image of the DEM:
    
      colormapper->SetInput(demToImage->GetOutput());
    
      writer->SetInput(colormapper->GetOutput());
    
      writer->Update();
    }
