.. _ComputePolylineFeatureFromImage:

ComputePolylineFeatureFromImage
===============================


This application computes the chosen descriptors for each studied polyline contained in the input VectorData.

Description
-----------

The first step in the classifier fusion based validation is to compute the chosen descriptors for each studied polyline.

Parameters
----------

.. contents:: :local:

.. |br| raw:: html

   <br />

.. |em| raw:: html

   &emsp;

**Input Image** :code:`-in image` *Mandatory* |br|
An image to compute the descriptors on.

**Vector Data** :code:`-vd vectorfile` *Mandatory* |br|
Vector data containing the polylines where the features will be computed.

Elevation management
^^^^^^^^^^^^^^^^^^^^



This group of parameters allows managing elevation values. Supported formats are SRTM, DTED or any geotiff. DownloadSRTMTiles application could be a useful tool to list/download tiles related to a product.

**DEM directory** :code:`-elev.dem directory` |br|
This parameter allows selecting a directory containing Digital Elevation Model files. Note that this directory should contain only DEM files. Unexpected behaviour might occurs if other images are found in this directory.

**Geoid File** :code:`-elev.geoid filename [dtype]` |br|
Use a geoid grid to get the height above the ellipsoid in case there is no DEM available, no coverage for some points or pixels with no_data in the DEM tiles. A version of the geoid can be found on the OTB website(https://gitlab.orfeo-toolbox.org/orfeotoolbox/otb-data/blob/master/Input/DEM/egm96.grd).

**Default elevation** :code:`-elev.default float` *Default value: 0* |br|
This parameter allows setting the default height above ellipsoid when there is no DEM available, no coverage for some points or pixels with no_data in the DEM tiles, and no geoid file has been set. This is also used by some application as an average elevation value.



------------

**Feature expression** :code:`-expr string` *Mandatory* |br|
The feature formula (b1 < 0.3) where b1 is the standard name of input image first band

**Feature name** :code:`-field string` *Mandatory* |br|
The field name corresponding to the feature codename (NONDVI, ROADSA...)

**Output Vector Data** :code:`-out vectorfile` *Mandatory* |br|
The output vector data containing polylines with a new field

**Load parameters from XML** :code:`-inxml filename.xml` |br|
Load application parameters from an XML file.

**Save parameters to XML** :code:`-outxml filename.xml` |br|
Save application parameters to an XML file.



Examples
--------

From the command-line:

.. code-block:: bash

    otbcli_ComputePolylineFeatureFromImage -in NDVI.TIF -vd roads_ground_truth.shp -expr "(b1 > 0.4)" -field NONDVI -out PolylineFeatureFromImage_LI_NONDVI_gt.shp


From Python:

.. code-block:: python

	import otbApplication

	app = otbApplication.Registry.CreateApplication("ComputePolylineFeatureFromImage")

	app.SetParameterString("in", "NDVI.TIF")
	app.SetParameterString("vd", "roads_ground_truth.shp")
	app.SetParameterString("expr", "(b1 > 0.4)")
	app.SetParameterString("field", "NONDVI")
	app.SetParameterString("out", "PolylineFeatureFromImage_LI_NONDVI_gt.shp")

	app.ExecuteAndWriteOutput()



Limitations
-----------

Since it does not rely on streaming process, take care of the size of input image before launching application.


