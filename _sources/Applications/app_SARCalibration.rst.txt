.. _SARCalibration:

SARCalibration
==============


Perform radiometric calibration of SAR images. Following sensors are supported: TerraSAR-X, Sentinel1 and Radarsat-2.Both Single Look Complex(SLC) and detected products are supported as input.

Description
-----------

The objective of SAR calibration is to provide imagery in which the pixel values can be directly related to the radar backscatter of the scene. This application allows computing Sigma Naught (Radiometric Calibration) for TerraSAR-X, Sentinel1 L1 and Radarsat-2 sensors. Metadata are automatically retrieved from image products.The application supports complex and non-complex images (SLC or detected products).

Parameters
----------

.. contents:: :local:

.. |br| raw:: html

   <br />

.. |em| raw:: html

   &emsp;

**Input Image** :code:`-in image` *Mandatory* |br|
Input complex image

**Output Image** :code:`-out image [dtype]` *Mandatory* |br|
Output calibrated image. This image contains the backscatter (sigmaNought) of the input image.

**Disable Noise** :code:`-noise bool` *Default value: false* |br|
Flag to disable noise. For 5.2.0 release, the noise values are only read by TerraSARX product.

**Lookup table** :code:`-lut [sigma|gamma|beta|dn]` *Default value: sigma* |br|
Lookup table values are not available with all SAR products. Products that provide lookup table with metadata are: Sentinel1, Radarsat2.

* **Use sigma nought lookup** |br| Use Sigma nought lookup value from product metadata

* **Use gamma nought lookup** |br| Use Gamma nought lookup value from product metadata

* **Use beta nought lookup** |br| Use Beta nought lookup value from product metadata

* **Use DN value lookup** |br| Use DN value lookup value from product metadata



**Available RAM (MB)** :code:`-ram int` *Default value: 256* |br|
Available memory for processing (in MB).

**Load parameters from XML** :code:`-inxml filename.xml` |br|
Load application parameters from an XML file.

**Save parameters to XML** :code:`-outxml filename.xml` |br|
Save application parameters to an XML file.



Examples
--------

From the command-line:

.. code-block:: bash

    otbcli_SARCalibration -in RSAT_imagery_HH.tif -out SarRadiometricCalibration.tif


From Python:

.. code-block:: python

	import otbApplication

	app = otbApplication.Registry.CreateApplication("SARCalibration")

	app.SetParameterString("in", "RSAT_imagery_HH.tif")
	app.SetParameterString("out", "SarRadiometricCalibration.tif")

	app.ExecuteAndWriteOutput()






