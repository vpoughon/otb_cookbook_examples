.. _app-ImageClassifier:

ImageClassifier
===============


Performs a classification of the input image according to a model file.

Description
-----------

This application performs an image classification based on a model file produced by the :ref:`app-TrainImagesClassifier` application. Pixels of the output image will contain the class labels decided by the classifier (maximal class label = 65535). The input pixels can be optionally centered and reduced according to the statistics file produced by the :ref:`app-ComputeImagesStatistics` application. An optional input mask can be provided, in which case only input image pixels whose corresponding mask value is greater than 0 will be classified. By default, the remaining of pixels will be given the label 0 in the output image.

Parameters
----------

.. contents:: :local:

.. |br| raw:: html

   <br />

.. |em| raw:: html

   &emsp;

**Input Image** :code:`-in image` *Mandatory* |br|
The input image to classify.

**Input Mask** :code:`-mask image` |br|
The mask allows restricting classification of the input image to the area where mask pixel values are greater than 0.

**Model file** :code:`-model filename [dtype]` *Mandatory* |br|
A model file (produced by TrainImagesClassifier application, maximal class label = 65535).

**Statistics file** :code:`-imstat filename [dtype]` |br|
A XML file containing mean and standard deviation to center and reduce samples before classification (produced by ComputeImagesStatistics application).

**Label mask value** :code:`-nodatalabel int` *Default value: 0* |br|
By default, hidden pixels will have the assigned label 0 in the output image. It's possible to define the label mask by another value, but be careful to not take a label from another class (max. 65535).

**Output Image** :code:`-out image [dtype]` *Mandatory* |br|
Output image containing class labels

**Confidence map** :code:`-confmap image [dtype]` |br|
Confidence map of the produced classification. The confidence index depends on the model: 

* LibSVM: difference between the two highest probabilities (needs a model with probability estimates, so that classes probabilities can be computed for each sample)
* Boost: sum of votes
* DecisionTree: (not supported)
* KNearestNeighbors: number of neighbors with the same label
* NeuralNetwork: difference between the two highest responses
* NormalBayes: (not supported)
* RandomForest: Confidence (proportion of votes for the majority class). Margin (normalized difference of the votes of the 2 majority classes) is not available for now.
* SVM: distance to margin (only works for 2-class models)


**Probability map** :code:`-probamap image [dtype]` |br|
Probability of each class for each pixel. This is an image having a number of bands equal to the number of classes in the model. This is only implemented for the Shark Random Forest classifier at this point.

**Available RAM (MB)** :code:`-ram int` *Default value: 256* |br|
Available memory for processing (in MB).

**Number of classes in the model** :code:`-nbclasses int` *Default value: 20* |br|
The number of classes is needed for the probamap output in order to set the number of output bands.

**Load parameters from XML** :code:`-inxml filename.xml` |br|
Load application parameters from an XML file.

**Save parameters to XML** :code:`-outxml filename.xml` |br|
Save application parameters to an XML file.



Examples
--------

From the command-line:

.. code-block:: bash

    otbcli_ImageClassifier -in QB_1_ortho.tif -imstat EstimateImageStatisticsQB1.xml -model clsvmModelQB1.svm -out clLabeledImageQB1.tif


From Python:

.. code-block:: python

	import otbApplication

	app = otbApplication.Registry.CreateApplication("ImageClassifier")

	app.SetParameterString("in", "QB_1_ortho.tif")
	app.SetParameterString("imstat", "EstimateImageStatisticsQB1.xml")
	app.SetParameterString("model", "clsvmModelQB1.svm")
	app.SetParameterString("out", "clLabeledImageQB1.tif")

	app.ExecuteAndWriteOutput()



Limitations
-----------

The input image must have the same type, order and number of bands than the images used to produce the statistics file and the SVM model file. If a statistics file was used during training by the TrainImagesClassifier, it is mandatory to use the same statistics file for classification. If an input mask is used, its size must match the input image size.

See also
--------

| :ref:`app-TrainImagesClassifier`, ValidateImagesClassifier, :ref:`app-ComputeImagesStatistics`
